import {
  __commonJS
} from "./chunk-WOOG5QLI.js";

// node_modules/arabic-persian-reshaper/PersianShaper.js
var require_PersianShaper = __commonJS({
  "node_modules/arabic-persian-reshaper/PersianShaper.js"(exports) {
    var charsMap = [
      /* code,isolated,initial, medial, final */
      [1569, 65152, null, null, null],
      /* HAMZA */
      [1570, 65153, null, null, 65154],
      /* ALEF_MADDA */
      [1571, 65155, null, null, 65156],
      /* ALEF_HAMZA_ABOVE */
      [1572, 65157, null, null, 65158],
      /* WAW_HAMZA */
      [1573, 65159, null, null, 65160],
      /* ALEF_HAMZA_BELOW */
      [1574, 65161, 65163, 65164, 65162],
      /* YEH_HAMZA */
      [1575, 65165, null, null, 65166],
      /* ALEF */
      [1576, 65167, 65169, 65170, 65168],
      /* BEH */
      [1577, 65171, null, null, 65172],
      /* TEH_MARBUTA */
      [1578, 65173, 65175, 65176, 65174],
      /* TEH */
      [1579, 65177, 65179, 65180, 65178],
      /* THEH */
      [1580, 65181, 65183, 65184, 65182],
      /* JEEM */
      [1581, 65185, 65187, 65188, 65186],
      /* HAH */
      [1582, 65189, 65191, 65192, 65190],
      /* KHAH */
      [1583, 65193, null, null, 65194],
      /* DAL */
      [1584, 65195, null, null, 65196],
      /* THAL */
      [1585, 65197, null, null, 65198],
      /* REH */
      [1586, 65199, null, null, 65200],
      /* ZAIN */
      [1688, 64394, null, null, 64395],
      /* ZHEH */
      [1587, 65201, 65203, 65204, 65202],
      /* SEEN */
      [1588, 65205, 65207, 65208, 65206],
      /* SHEEN */
      [1589, 65209, 65211, 65212, 65210],
      /* SAD */
      [1590, 65213, 65215, 65216, 65214],
      /* DAD */
      [1591, 65217, 65219, 65220, 65218],
      /* TAH */
      [1592, 65221, 65223, 65224, 65222],
      /* ZAH */
      [1593, 65225, 65227, 65228, 65226],
      /* AIN */
      [1594, 65229, 65231, 65232, 65230],
      /* GHAIN */
      [1600, 1600, 1600, 1600, 1600],
      /* TATWEEL */
      [1601, 65233, 65235, 65236, 65234],
      /* FEH */
      [1602, 65237, 65239, 65240, 65238],
      /* QAF */
      [1603, 65241, 65243, 65244, 65242],
      /* KAF */
      [1604, 65245, 65247, 65248, 65246],
      /* LAM */
      [1605, 65249, 65251, 65252, 65250],
      /* MEEM */
      [1606, 65253, 65255, 65256, 65254],
      /* NOON */
      [1607, 65257, 65259, 65260, 65258],
      /* HEH */
      [1608, 65261, null, null, 65262],
      /* WAW */
      [1609, 65263, null, null, 65264],
      /* ALEF_MAKSURA */
      [1610, 65265, 65267, 65268, 65266],
      /* YEH Arabic */
      [1740, 64508, 64510, 64511, 64509],
      /* YEH Farsi */
      [1670, 64378, 64380, 64381, 64379],
      /* CHEH */
      [1662, 64342, 64344, 64345, 64343],
      [1711, 64402, 64404, 64405, 64403],
      [1705, 64398, 64400, 64401, 64399]
    ];
    var combCharsMap = [
      //[ [ 0x0644, 0x0622 ], 0xFEF5, null, null, 0xFEF6 ], /* LAM_ALEF_MADDA */
      //[ [ 0x0644, 0x0623 ], 0xFEF7, null, null, 0xFEF8 ], /* LAM_ALEF_HAMZA_ABOVE */
      //[ [ 0x0644, 0x0625 ], 0xFEF9, null, null, 0xFEFA ], /* LAM_ALEF_HAMZA_BELOW */
      [[1604, 1575], 65275, null, null, 65276]
      /* LAM_ALEF */
    ];
    var transChars = [
      1552,
      /* ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM */
      1554,
      /* ARABIC SIGN ALAYHE ASSALLAM */
      1555,
      /* ARABIC SIGN RADI ALLAHOU ANHU */
      1556,
      /* ARABIC SIGN TAKHALLUS */
      1557,
      /* ARABIC SMALL HIGH TAH */
      1611,
      /* ARABIC FATHATAN */
      1612,
      /* ARABIC DAMMATAN */
      1613,
      /* ARABIC KASRATAN */
      1614,
      /* ARABIC FATHA */
      1615,
      /* ARABIC DAMMA */
      1616,
      /* ARABIC KASRA */
      1617,
      /* ARABIC SHADDA */
      1618,
      /* ARABIC SUKUN */
      1619,
      /* ARABIC MADDAH ABOVE */
      1620,
      /* ARABIC HAMZA ABOVE */
      1621,
      /* ARABIC HAMZA BELOW */
      1622,
      /* ARABIC SUBSCRIPT ALEF */
      1623,
      /* ARABIC INVERTED DAMMA */
      1624,
      /* ARABIC MARK NOON GHUNNA */
      1648,
      /* ARABIC LETTER SUPERSCRIPT ALEF */
      1750,
      /* ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA */
      1751,
      /* ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA */
      1752,
      /* ARABIC SMALL HIGH MEEM INITIAL FORM */
      1753,
      /* ARABIC SMALL HIGH LAM ALEF */
      1754,
      /* ARABIC SMALL HIGH JEEM */
      1755,
      /* ARABIC SMALL HIGH THREE DOTS */
      1756,
      /* ARABIC SMALL HIGH SEEN */
      1759,
      /* ARABIC SMALL HIGH ROUNDED ZERO */
      1760,
      /* ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO */
      1761,
      /* ARABIC SMALL HIGH DOTLESS HEAD OF KHAH */
      1762,
      /* ARABIC SMALL HIGH MEEM ISOLATED FORM */
      1763,
      /* ARABIC SMALL LOW SEEN */
      1764,
      /* ARABIC SMALL HIGH MADDA */
      1767,
      /* ARABIC SMALL HIGH YEH */
      1768,
      /* ARABIC SMALL HIGH NOON */
      1770,
      /* ARABIC EMPTY CENTRE LOW STOP */
      1771,
      /* ARABIC EMPTY CENTRE HIGH STOP */
      1772,
      /* ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE */
      1773
      /* ARABIC SMALL LOW MEEM */
    ];
    function CharacterMapContains(c) {
      for (var i = 0; i < charsMap.length; ++i)
        if (charsMap[i][0] == c) return true;
      return false;
    }
    function GetCharRep(c) {
      for (var i = 0; i < charsMap.length; ++i)
        if (charsMap[i][0] == c) return charsMap[i];
      return false;
    }
    function GetCombCharRep(c1, c2) {
      for (var i = 0; i < combCharsMap.length; ++i)
        if (combCharsMap[i][0][0] == c1 && combCharsMap[i][0][1] == c2) return combCharsMap[i];
      return false;
    }
    function IsTransparent(c) {
      for (var i = 0; i < transChars.length; ++i)
        if (transChars[i] == c) return true;
      return false;
    }
    function convertArabic(normal) {
      var crep, combcrep, shaped = "";
      for (var i = 0; i < normal.length; ++i) {
        var current = normal.charCodeAt(i);
        if (CharacterMapContains(current)) {
          var prev = null, next = null, prevID = i - 1, nextID = i + 1;
          for (; prevID >= 0; --prevID) {
            if (!IsTransparent(normal.charCodeAt(prevID))) {
              break;
            }
          }
          prev = prevID >= 0 ? normal.charCodeAt(prevID) : null;
          crep = prev ? GetCharRep(prev) : false;
          if (crep[2] == null && crep[3] == null) {
            prev = null;
          }
          for (; nextID < normal.length; ++nextID) {
            if (!IsTransparent(normal.charCodeAt(nextID))) {
              break;
            }
          }
          next = nextID <= normal.length ? normal.charCodeAt(nextID) : null;
          crep = next ? GetCharRep(next) : false;
          if (crep[3] == null && crep[4] == null) {
            next = null;
          }
          if (current == 1604 && next != null && (next == 1570 || next == 1571 || next == 1573 || next == 1575)) {
            combcrep = GetCombCharRep(current, next);
            if (prev != null) {
              shaped += String.fromCharCode(combcrep[4]);
            } else {
              shaped += String.fromCharCode(combcrep[1]);
            }
            i = i + 1;
            continue;
          }
          crep = GetCharRep(current);
          if (prev != null && next != null && crep[3] != null) {
            shaped += String.fromCharCode(crep[3]);
            continue;
          } else if (prev != null && crep[4] != null) {
            shaped += String.fromCharCode(crep[4]);
            continue;
          } else if (next != null && crep[2] != null) {
            shaped += String.fromCharCode(crep[2]);
            continue;
          } else {
            shaped += String.fromCharCode(crep[1]);
          }
        } else {
          shaped += String.fromCharCode(current);
        }
      }
      return shaped;
    }
    exports.convertArabic = convertArabic;
    function convertArabicBack(apfb) {
      var toReturn = "", selectedChar;
      theLoop:
        for (var i = 0; i < apfb.length; ++i) {
          selectedChar = apfb.charCodeAt(i);
          for (var j = 0; j < charsMap.length; ++j) {
            if (charsMap[j][4] == selectedChar || charsMap[j][2] == selectedChar || charsMap[j][1] == selectedChar || charsMap[j][3] == selectedChar) {
              toReturn += String.fromCharCode(charsMap[j][0]);
              continue theLoop;
            }
          }
          for (var j = 0; j < combCharsMap.length; ++j) {
            if (combCharsMap[j][4] == selectedChar || combCharsMap[j][2] == selectedChar || combCharsMap[j][1] == selectedChar || combCharsMap[j][3] == selectedChar) {
              toReturn += String.fromCharCode(combCharsMap[j][0][0]) + String.fromCharCode(combCharsMap[j][0][1]);
              continue theLoop;
            }
          }
          toReturn += String.fromCharCode(selectedChar);
        }
      return toReturn;
    }
    exports.convertArabicBack = convertArabicBack;
  }
});

// node_modules/arabic-persian-reshaper/ArabicShaper.js
var require_ArabicShaper = __commonJS({
  "node_modules/arabic-persian-reshaper/ArabicShaper.js"(exports) {
    var charsMap = [
      /* code,isolated,initial, medial, final */
      [1569, 65152, null, null, null],
      /* HAMZA */
      [1570, 65153, null, null, 65154],
      /* ALEF_MADDA */
      [1571, 65155, null, null, 65156],
      /* ALEF_HAMZA_ABOVE */
      [1572, 65157, null, null, 65158],
      /* WAW_HAMZA */
      [1573, 65159, null, null, 65160],
      /* ALEF_HAMZA_BELOW */
      [1574, 65161, 65163, 65164, 65162],
      /* YEH_HAMZA */
      [1575, 65165, null, null, 65166],
      /* ALEF */
      [1576, 65167, 65169, 65170, 65168],
      /* BEH */
      [1577, 65171, null, null, 65172],
      /* TEH_MARBUTA */
      [1578, 65173, 65175, 65176, 65174],
      /* TEH */
      [1579, 65177, 65179, 65180, 65178],
      /* THEH */
      [1580, 65181, 65183, 65184, 65182],
      /* JEEM */
      [1581, 65185, 65187, 65188, 65186],
      /* HAH */
      [1582, 65189, 65191, 65192, 65190],
      /* KHAH */
      [1583, 65193, null, null, 65194],
      /* DAL */
      [1584, 65195, null, null, 65196],
      /* THAL */
      [1585, 65197, null, null, 65198],
      /* REH */
      [1586, 65199, null, null, 65200],
      /* ZAIN */
      [1688, 64394, null, null, 64395],
      /* ZHEH */
      [1587, 65201, 65203, 65204, 65202],
      /* SEEN */
      [1588, 65205, 65207, 65208, 65206],
      /* SHEEN */
      [1589, 65209, 65211, 65212, 65210],
      /* SAD */
      [1590, 65213, 65215, 65216, 65214],
      /* DAD */
      [1591, 65217, 65219, 65220, 65218],
      /* TAH */
      [1592, 65221, 65223, 65224, 65222],
      /* ZAH */
      [1593, 65225, 65227, 65228, 65226],
      /* AIN */
      [1594, 65229, 65231, 65232, 65230],
      /* GHAIN */
      [1600, 1600, 1600, 1600, 1600],
      /* TATWEEL */
      [1601, 65233, 65235, 65236, 65234],
      /* FEH */
      [1602, 65237, 65239, 65240, 65238],
      /* QAF */
      [1603, 65241, 65243, 65244, 65242],
      /* KAF */
      [1604, 65245, 65247, 65248, 65246],
      /* LAM */
      [1605, 65249, 65251, 65252, 65250],
      /* MEEM */
      [1606, 65253, 65255, 65256, 65254],
      /* NOON */
      [1607, 65257, 65259, 65260, 65258],
      /* HEH */
      [1608, 65261, null, null, 65262],
      /* WAW */
      /* (arabic edit):
       	-added missing forms in Alef_MAKSURA
      */
      [1609, 65263, 64488, 64489, 64509],
      /* ALEF_MAKSURA */
      [1610, 65265, 65267, 65268, 65266],
      /* YEH Arabic */
      /* (arabic edit):
      	-there's a bug/oversight in JavaScript where the fianl form of Alef_MAKSURA should be 1640 instead it is 1709
      	the same as YEH Farsi. so I changed the YEH Farsi final form value from 0xFBFD to 0xFEF0
      	to point to the final form of ALEF_MAKSURA in the Arabic font.
      */
      [1740, 64508, 64510, 64511, 65264],
      /* YEH Farsi */
      [1670, 64378, 64380, 64381, 64379],
      /* CHEH */
      [1662, 64342, 64344, 64345, 64343],
      [1711, 64402, 64404, 64405, 64403],
      [1705, 64398, 64400, 64401, 64399]
    ];
    var combCharsMap = [
      // alex_clay: lam_alem forms found in Arabic.
      [[1604, 1570], 65269, null, null, 65270],
      /* LAM_ALEF_MADDA */
      [[1604, 1571], 65271, null, null, 65272],
      /* LAM_ALEF_HAMZA_ABOVE */
      [[1604, 1573], 65273, null, null, 65274],
      /* LAM_ALEF_HAMZA_BELOW */
      [[1604, 1575], 65275, null, null, 65276]
      /* LAM_ALEF */
    ];
    var transChars = [
      1552,
      /* ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM */
      1554,
      /* ARABIC SIGN ALAYHE ASSALLAM */
      1555,
      /* ARABIC SIGN RADI ALLAHOU ANHU */
      1556,
      /* ARABIC SIGN TAKHALLUS */
      1557,
      /* ARABIC SMALL HIGH TAH */
      1611,
      /* ARABIC FATHATAN */
      1612,
      /* ARABIC DAMMATAN */
      1613,
      /* ARABIC KASRATAN */
      1614,
      /* ARABIC FATHA */
      1615,
      /* ARABIC DAMMA */
      1616,
      /* ARABIC KASRA */
      1617,
      /* ARABIC SHADDA */
      1618,
      /* ARABIC SUKUN */
      1619,
      /* ARABIC MADDAH ABOVE */
      1620,
      /* ARABIC HAMZA ABOVE */
      1621,
      /* ARABIC HAMZA BELOW */
      1622,
      /* ARABIC SUBSCRIPT ALEF */
      1623,
      /* ARABIC INVERTED DAMMA */
      1624,
      /* ARABIC MARK NOON GHUNNA */
      1648,
      /* ARABIC LETTER SUPERSCRIPT ALEF */
      1750,
      /* ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA */
      1751,
      /* ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA */
      1752,
      /* ARABIC SMALL HIGH MEEM INITIAL FORM */
      1753,
      /* ARABIC SMALL HIGH LAM ALEF */
      1754,
      /* ARABIC SMALL HIGH JEEM */
      1755,
      /* ARABIC SMALL HIGH THREE DOTS */
      1756,
      /* ARABIC SMALL HIGH SEEN */
      1759,
      /* ARABIC SMALL HIGH ROUNDED ZERO */
      1760,
      /* ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO */
      1761,
      /* ARABIC SMALL HIGH DOTLESS HEAD OF KHAH */
      1762,
      /* ARABIC SMALL HIGH MEEM ISOLATED FORM */
      1763,
      /* ARABIC SMALL LOW SEEN */
      1764,
      /* ARABIC SMALL HIGH MADDA */
      1767,
      /* ARABIC SMALL HIGH YEH */
      1768,
      /* ARABIC SMALL HIGH NOON */
      1770,
      /* ARABIC EMPTY CENTRE LOW STOP */
      1771,
      /* ARABIC EMPTY CENTRE HIGH STOP */
      1772,
      /* ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE */
      1773
      /* ARABIC SMALL LOW MEEM */
    ];
    function CharacterMapContains(c) {
      for (var i = 0; i < charsMap.length; ++i)
        if (charsMap[i][0] == c) return true;
      return false;
    }
    function GetCharRep(c) {
      for (var i = 0; i < charsMap.length; ++i)
        if (charsMap[i][0] == c) return charsMap[i];
      return false;
    }
    function GetCombCharRep(c1, c2) {
      for (var i = 0; i < combCharsMap.length; ++i)
        if (combCharsMap[i][0][0] == c1 && combCharsMap[i][0][1] == c2) return combCharsMap[i];
      return false;
    }
    function IsTransparent(c) {
      for (var i = 0; i < transChars.length; ++i)
        if (transChars[i] == c) return true;
      return false;
    }
    function convertArabic(normal) {
      var crep, combcrep, shaped = "";
      for (var i = 0; i < normal.length; ++i) {
        var current = normal.charCodeAt(i);
        if (CharacterMapContains(current)) {
          var prev = null, next = null, prevID = i - 1, nextID = i + 1;
          for (; prevID >= 0; --prevID) {
            if (!IsTransparent(normal.charCodeAt(prevID))) {
              break;
            }
          }
          prev = prevID >= 0 ? normal.charCodeAt(prevID) : null;
          crep = prev ? GetCharRep(prev) : false;
          if (crep[2] == null && crep[3] == null) {
            prev = null;
          }
          for (; nextID < normal.length; ++nextID) {
            if (!IsTransparent(normal.charCodeAt(nextID))) {
              break;
            }
          }
          next = nextID <= normal.length ? normal.charCodeAt(nextID) : null;
          crep = next ? GetCharRep(next) : false;
          if (crep[3] == null && crep[4] == null) {
            next = null;
          }
          if (current == 1604 && next != null && (next == 1570 || next == 1571 || next == 1573 || next == 1575)) {
            combcrep = GetCombCharRep(current, next);
            if (prev != null) {
              shaped += String.fromCharCode(combcrep[4]);
            } else {
              shaped += String.fromCharCode(combcrep[1]);
            }
            i = i + 1;
            continue;
          }
          crep = GetCharRep(current);
          if (prev != null && next != null && crep[3] != null) {
            shaped += String.fromCharCode(crep[3]);
            continue;
          } else if (prev != null && crep[4] != null) {
            shaped += String.fromCharCode(crep[4]);
            continue;
          } else if (next != null && crep[2] != null) {
            shaped += String.fromCharCode(crep[2]);
            continue;
          } else {
            shaped += String.fromCharCode(crep[1]);
          }
        } else {
          shaped += String.fromCharCode(current);
        }
      }
      return shaped;
    }
    exports.convertArabic = convertArabic;
    function convertArabicBack(apfb) {
      var toReturn = "", selectedChar;
      theLoop:
        for (var i = 0; i < apfb.length; ++i) {
          selectedChar = apfb.charCodeAt(i);
          for (var j = 0; j < charsMap.length; ++j) {
            if (charsMap[j][4] == selectedChar || charsMap[j][2] == selectedChar || charsMap[j][1] == selectedChar || charsMap[j][3] == selectedChar) {
              toReturn += String.fromCharCode(charsMap[j][0]);
              continue theLoop;
            }
          }
          for (var j = 0; j < combCharsMap.length; ++j) {
            if (combCharsMap[j][4] == selectedChar || combCharsMap[j][2] == selectedChar || combCharsMap[j][1] == selectedChar || combCharsMap[j][3] == selectedChar) {
              toReturn += String.fromCharCode(combCharsMap[j][0][0]) + String.fromCharCode(combCharsMap[j][0][1]);
              continue theLoop;
            }
          }
          toReturn += String.fromCharCode(selectedChar);
        }
      return toReturn;
    }
    exports.convertArabicBack = convertArabicBack;
  }
});

// node_modules/arabic-persian-reshaper/index.js
var require_arabic_persian_reshaper = __commonJS({
  "node_modules/arabic-persian-reshaper/index.js"(exports, module) {
    module.exports = {
      PersianShaper: require_PersianShaper(),
      ArabicShaper: require_ArabicShaper()
    };
  }
});
export default require_arabic_persian_reshaper();
//# sourceMappingURL=arabic-persian-reshaper.js.map
